/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package com.mycompany.churrasquito;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import static java.lang.Thread.sleep;
import java.util.logging.Level;
import java.util.logging.Logger;


/**
 *
 * @author usuario
 */
public class torredehanoi extends javax.swing.JDialog {
int miliseg=0;
int seg=0;
int min=0;
int hor=0;
boolean condition=true;
  int newPlayer;
    /**
     * Creates new form torredehanoi
     */
    public torredehanoi(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
           lecturadearchivo();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cronometro = new javax.swing.JLabel();
        start = new javax.swing.JButton();
        lb2 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        nombrejugador = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        victorias = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        towel1 = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        towel2 = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        towel3 = new javax.swing.JTextArea();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        torre1atorre2 = new javax.swing.JButton();
        torre3atorre2 = new javax.swing.JButton();
        torre1atorre3 = new javax.swing.JButton();
        torre2atorre3 = new javax.swing.JButton();
        torre2atorre1 = new javax.swing.JButton();
        torre3atorre1 = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        moooves = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        comboDisks = new javax.swing.JComboBox<>();
        retry = new javax.swing.JButton();
        bay = new javax.swing.JButton();
        ganoo = new javax.swing.JLabel();
        tiempomejorado = new javax.swing.JLabel();
        comboPartida = new javax.swing.JComboBox<>();
        save = new javax.swing.JButton();
        load = new javax.swing.JButton();
        GP = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        cronometro.setFont(new java.awt.Font("Liberation Sans", 0, 48)); // NOI18N
        cronometro.setText("00 : 00 : 00 ");

        start.setText("INICIO");
        start.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startActionPerformed(evt);
            }
        });

        lb2.setFont(new java.awt.Font("Liberation Sans", 0, 24)); // NOI18N
        lb2.setText("0000");

        jLabel2.setText("Player:");

        jLabel3.setText("Victories:");

        jLabel4.setFont(new java.awt.Font("Liberation Sans", 0, 18)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("TORRE 1");

        jLabel5.setFont(new java.awt.Font("Liberation Sans", 0, 18)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("TORRE 2");

        jLabel6.setFont(new java.awt.Font("Liberation Sans", 0, 18)); // NOI18N
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("TORRE 3");

        towel1.setEditable(false);
        towel1.setColumns(15);
        towel1.setRows(5);
        jScrollPane1.setViewportView(towel1);

        towel2.setEditable(false);
        towel2.setColumns(15);
        towel2.setRows(5);
        jScrollPane2.setViewportView(towel2);

        towel3.setEditable(false);
        towel3.setColumns(15);
        towel3.setRows(5);
        jScrollPane3.setViewportView(towel3);

        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("Mover a la torre:");

        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setText("Mover a la torre:");

        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel9.setText("Mover a la torre:");

        torre1atorre2.setText("2");
        torre1atorre2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                torre1atorre2ActionPerformed(evt);
            }
        });

        torre3atorre2.setText("2");
        torre3atorre2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                torre3atorre2ActionPerformed(evt);
            }
        });

        torre1atorre3.setText("3");
        torre1atorre3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                torre1atorre3ActionPerformed(evt);
            }
        });

        torre2atorre3.setText("3");
        torre2atorre3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                torre2atorre3ActionPerformed(evt);
            }
        });

        torre2atorre1.setText("1");
        torre2atorre1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                torre2atorre1ActionPerformed(evt);
            }
        });

        torre3atorre1.setText("1");
        torre3atorre1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                torre3atorre1ActionPerformed(evt);
            }
        });

        jLabel10.setText("Movimientos:");

        moooves.setText("0");

        jLabel11.setText("Con cuantos discos desea jugar?:");

        comboDisks.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "3", "4", "5", "6", "7", "8" }));

        retry.setText("Reiniciar");
        retry.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                retryActionPerformed(evt);
            }
        });

        bay.setText("Abandonar Partida");
        bay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bayActionPerformed(evt);
            }
        });

        ganoo.setBackground(new java.awt.Color(51, 204, 0));
        ganoo.setFont(new java.awt.Font("Noto Mono", 0, 18)); // NOI18N
        ganoo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        comboPartida.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Partida 1", "Partida 2" }));
        comboPartida.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboPartidaActionPerformed(evt);
            }
        });

        save.setText("Guardar");
        save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveActionPerformed(evt);
            }
        });

        load.setText("Cargar");
        load.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadActionPerformed(evt);
            }
        });

        GP.setText(" ");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(comboPartida, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(52, 52, 52)
                                .addComponent(save)
                                .addGap(39, 39, 39)
                                .addComponent(load)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(cronometro, javax.swing.GroupLayout.PREFERRED_SIZE, 322, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addGap(140, 140, 140)
                                        .addComponent(start)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(retry)
                                        .addGap(19, 19, 19))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(GP, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(bay))))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(63, 63, 63)
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(144, 144, 144)
                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(ganoo, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(48, 48, 48)
                                .addComponent(lb2, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel2)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(nombrejugador, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel3)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(victorias, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(63, 63, 63)
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(120, 120, 120)
                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(118, 118, 118)
                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addGap(25, 25, 25)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                            .addGap(135, 135, 135)
                                            .addComponent(torre1atorre3, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(78, 78, 78)
                                            .addComponent(torre2atorre1, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(75, 75, 75)
                                            .addComponent(torre2atorre3, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(29, 29, 29)
                                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGroup(layout.createSequentialGroup()
                                    .addContainerGap()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(torre1atorre2, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(jLabel10)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(moooves, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(294, 294, 294)))))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(264, 264, 264)
                                .addComponent(jLabel11)))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(torre3atorre1, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(124, 124, 124)
                                .addComponent(torre3atorre2, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(comboDisks, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(27, 27, 27)
                        .addComponent(tiempomejorado, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cronometro, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lb2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(retry)
                                    .addComponent(start))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(bay))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(22, 22, 22)
                                        .addComponent(ganoo, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(28, 28, 28)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(comboPartida, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(save)
                                            .addComponent(load)
                                            .addComponent(GP))))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(nombrejugador, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(victorias, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel2)
                            .addGap(18, 18, 18)
                            .addComponent(jLabel3))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tiempomejorado, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel9)
                    .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(8, 8, 8)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(torre1atorre2)
                    .addComponent(torre1atorre3)
                    .addComponent(torre2atorre1)
                    .addComponent(torre2atorre3)
                    .addComponent(torre3atorre1)
                    .addComponent(torre3atorre2))
                .addGap(50, 50, 50)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(moooves, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11)
                    .addComponent(comboDisks, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(9, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    public void setPlayer(){
         victorias.setText(String.valueOf(partidasGanadas[newPlayer]));
       nombrejugador.setText(nombres[newPlayer]); 
    }
    
    
    
    

  public void imprimir(){
String disk1=" ";
String disk2=" ";
String disk3=" ";

// String n="";

      for(int i=0;i<disks;i++){
           
          disk1+=" "+Torre[0][i]+"\n ";
          disk2+=" "+Torre[1][i]+"\n ";
          disk3+=" "+Torre[2][i]+"\n ";
 // n+=valorTorre[0][i]+" "+valorTorre[1][i] + " "+ valorTorre[2][i]+"\n";
  
      }
      
      towel1.setText(disk1);
      towel2.setText(disk2);
      towel3.setText(disk3);
     // prueba.setText(n);
  
  }
    boolean stopcontadorahinomas=false;
  public boolean win() throws IOException{
  boolean winn= false;
  int cont=0;
      for (int i = 0; i < disks-1; i++) {
          if(valorTorre[2][i]>cont){
              cont++;
          }
      }
  if(cont>=disks-1){
  winn=true;
  condition=false;
  }
    if(winn==true){
        ganoo.setText("Ganaste Crack");
      
        if(stopcontadorahinomas==false){
        partidasGanadas[newPlayer]++;
        
        if(mmT[newPlayer]==100){
            mmT[newPlayer]=movimientos+100;
        minimohora[newPlayer]=hor;
        minimominuto[newPlayer]=min+10;
        minimosegundo[newPlayer]=seg+10;
        
        tiempomejorado.setText("Conseguiste un nuevo record :D");
        
        }else{
        
        if(movimientos<mmT[newPlayer]-100){
            mmT[newPlayer]=movimientos+100;
        minimohora[newPlayer]=hor;
        minimominuto[newPlayer]=min+10;
        minimosegundo[newPlayer]=seg+10;
        
        tiempomejorado.setText("Conseguiste un nuevo record :D");
        }
        
        }
        
        
        
        escribir();
        }
       
        stopcontadorahinomas=true;
       setPlayer();
    }else{
    ganoo.setText("");
    }
    
   return winn;
  }
  public int getnewJ() {
        return newPlayer;
    }

    public void setnewJ(int NJ) {
        this.newPlayer = NJ;
    }
  
  
    String nombres[]=new String[5];
        int partidasGanadas []=new int [5];
    int partidasPerdidas[]=new int[5];
    int partidasAbandonadas[]=new int[5];
    int mmT[]=new int[5];
        int minimohora[]=new int[5];
    int minimominuto[]= new int[5] ;
    int minimosegundo[]=new int [5];
    String tiempoT[]=new String[5];
   
    public void lecturadearchivo(){
    
    FileReader archivo;
BufferedReader lector;
   



try {
    archivo = new FileReader("/home/usuario/NetBeansProjects/Churrasquito/Usuarios.txt");
    if(archivo.ready()){
        lector =new BufferedReader(archivo);
        String cadena;
        int g=0;
        int p=0;
        int a=0;
        int m=0;
         int mh=0;
    int mm=0;
    int ms=0;
        String time="";
        String nombre;
        
        int gD=0;
        int pD=0;
        int aD=0;
        int mD=0;
        String timeD="";
       
        
        int pp=0;
        while ((cadena=lector.readLine())!=null) {
        //asignar usuarios 
            nombre=cadena.substring(2,12);
            g=Integer.parseInt(cadena.substring(13, 15));
            p=Integer.parseInt(cadena.substring(16, 18));
            a=Integer.parseInt(cadena.substring(19, 21));
            m=Integer.parseInt(cadena.substring(22, 25));
            mh=Integer.parseInt(cadena.substring(26,27));
            mm=Integer.parseInt(cadena.substring(28,30));
            ms=Integer.parseInt(cadena.substring(31,33));
            
           
           
           
            gD=Integer.parseInt(cadena.substring(34, 36));
            pD=Integer.parseInt(cadena.substring(37, 39));
            aD=Integer.parseInt(cadena.substring(40, 42));
            mD=Integer.parseInt(cadena.substring(43, 46));
           timeD=cadena.substring(47,cadena.length());
           
           
           nombres[pp]=nombre;
           partidasGanadas[pp]=g;
           partidasPerdidas[pp]=p;
           partidasAbandonadas[pp]=a;
           mmT[pp]=m;
           minimohora[pp]=mh;
           minimominuto[pp]=mm;
           minimosegundo[pp]=ms;
           tiempoT[pp]=time;
            
          
          
            pp=pp+1;
        }

    }else{
        System.out.println("El archivo no esta listo para ser leido");

    }
} catch (Exception e) {
    System.out.println("Error: "+e.getMessage());
}
    
    
    }
 
    public void escribir () throws IOException{
            
        FileWriter archivo =null;
PrintWriter  escritor =null;
try {
    archivo =new  FileWriter("/home/usuario/NetBeansProjects/Churrasquito/Usuarios.txt");
    escritor =new PrintWriter(archivo);

//crear array de mascotas vacias
for (int i = 0; i < 5; i++) {
        escritor.println(i+","+nombres[i]+","+partidasGanadas[i]+","+partidasPerdidas[i]+","+partidasAbandonadas[i]+","+mmT[i]+","+minimohora[i]+":"+minimominuto[i]+":"+minimosegundo[i]);
    
    
    
}


} catch (Exception e) {
    System.out.println("Error: " +e.getMessage());
 
}finally{
    archivo.close();
}
    }
    
   
    
    
    
    
  
  public void mover(int salida, int destino){
      
      
      boolean terminar=false;
      boolean terminar2=false;
      
      int pos1=0;
      int pos2=disks-1;
      do {      
            if(valorTorre[salida][pos1]!=0){
                terminar=true;
            }else{
            pos1++;
            }
           
            
            
        } while (!terminar);
      
        do {            
       if(valorTorre[destino][pos2]==0){
     terminar2=true;
     
            }else{
       pos2--;
       }      
       
        } while (!terminar2);
        
        //verificar si el disco es mas grande
        if(pos2==disks-1){
           if(valorTorre[destino][pos2]<valorTorre[salida][pos1]){
             //pasar el valor a la nueva posicion
             valorTorre[destino][pos2]=valorTorre[salida][pos1];
            Torre[destino][pos2]=Torre[salida][pos1];
            Torre[salida][pos1]="";
            
            
            //vaciar la posicion del disco
            valorTorre[salida][pos1]=0;
            
                movimientos++;
      
      moooves.setText(String.valueOf(movimientos));
  
        } 
        }else{
        if(valorTorre[destino][pos2+1]>valorTorre[salida][pos1]){
             //pasar el valor a la nueva posicion
             valorTorre[destino][pos2]=valorTorre[salida][pos1];
            Torre[destino][pos2]=Torre[salida][pos1];
            Torre[salida][pos1]="";
            
            
            //vaciar la posicion del disco
            valorTorre[salida][pos1]=0;
            movimientos++;
      
      moooves.setText(String.valueOf(movimientos));
  
        }
        }
        
        
        
        
      imprimir();
      
      
      
  }
    private void startActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startActionPerformed
        
DefinirDiscos();
       imprimir();
        setPlayer();
       if(stopcontadorahinomas){
           hor=0;
           min=0;
           seg=0;
           miliseg=0;
        stopcontadorahinomas=false;    
       }
       
    
       
       
       condition=true;
     Thread hilo = new Thread(){
     
     public void run(){
     for(;;){
     if(condition==true){
         
         try {
             sleep(1);
             if(miliseg>=1000){
                 miliseg=0;
                 seg++;
             }
             if(seg>=60){
                 miliseg=0;
                 seg=0;
                 min++;
             }
             if(min>=60){
                 miliseg=0;
                 seg=0;
                 min=0;
                 hor++;
             }
             
             cronometro.setText(hor+" : "+min+" : "+seg+" : "+miliseg);
             miliseg++;
         } catch (Exception e) {
         }
         
     }else{
     break;
     }
     
     
     }
     
     }
     
     };
        
        
      hilo.start();  
    }//GEN-LAST:event_startActionPerformed
int movimientos=0;
    private void torre1atorre2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_torre1atorre2ActionPerformed
        // TODO add your handling code here:
               if(condition==true){
          try {
          mover(0,1);
              
          } catch (Exception e) {
          }
      
      }
    }//GEN-LAST:event_torre1atorre2ActionPerformed

    private void torre1atorre3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_torre1atorre3ActionPerformed
        // TODO add your handling code here:
           
       if (condition==true){
      
     mover(0,2);
     
           try {
               win();
           } catch (IOException ex) {
               Logger.getLogger(torredehanoi.class.getName()).log(Level.SEVERE, null, ex);
           }
    
       
       
      }  
    }//GEN-LAST:event_torre1atorre3ActionPerformed

    private void torre2atorre1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_torre2atorre1ActionPerformed
        // TODO add your handling code here:
              try {
            
      mover(1,0);
        } catch (Exception e) {
        }
    }//GEN-LAST:event_torre2atorre1ActionPerformed

    private void torre2atorre3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_torre2atorre3ActionPerformed
        // TODO add your handling code here:
        boolean gano=false;
        try {
            gano = win();
        } catch (IOException ex) {
            Logger.getLogger(torredehanoi.class.getName()).log(Level.SEVERE, null, ex);
        }
if(gano==false){
mover(1,2);
}  
        try {
            win();
        } catch (IOException ex) {
            Logger.getLogger(torredehanoi.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_torre2atorre3ActionPerformed

    private void torre3atorre1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_torre3atorre1ActionPerformed
        // TODO add your handling code here:
        boolean gano=false;
        try {
            gano = win();
        } catch (IOException ex) {
            Logger.getLogger(torredehanoi.class.getName()).log(Level.SEVERE, null, ex);
        }
if(gano==false){

      mover(2,0);
}
    }//GEN-LAST:event_torre3atorre1ActionPerformed

    private void torre3atorre2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_torre3atorre2ActionPerformed
        // TODO add your handling code here:
        boolean gano=false;
        try {
            gano = win();
        } catch (IOException ex) {
            Logger.getLogger(torredehanoi.class.getName()).log(Level.SEVERE, null, ex);
        }
     
if(gano==false){
mover(2,1);
}
    }//GEN-LAST:event_torre3atorre2ActionPerformed

    private void bayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bayActionPerformed
        // TODO add your handling code here:
        dispose();
                if(stopcontadorahinomas==false){
        
            partidasPerdidas[newPlayer]++;
            partidasAbandonadas[newPlayer]++;
            try {
            escribir();
        } catch (IOException ex) {
            Logger.getLogger(torredehanoi.class.getName()).log(Level.SEVERE, null, ex);
        }
       
        }
    }//GEN-LAST:event_bayActionPerformed

    private void retryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_retryActionPerformed

            DefinirDiscos();
       imprimir();
    }//GEN-LAST:event_retryActionPerformed
    public void guardarpartida(int n) throws IOException{
     FileWriter archivo =null;
PrintWriter  escritor =null;
try {
    archivo =new  FileWriter("/home/usuario/NetBeansProjects/Churrasquito"+n+".txt");
    escritor =new PrintWriter(archivo);

//crear array de mascotas vacias
for (int i = 0; i<3; i++) {
    
    for (int j = 0; j < disks; j++) {
        escritor.print(valorTorre[i][j]);
    }
        escritor.println();
    
}

escritor.println((min+10)+":"+(seg+10));
escritor.println(disks);



} catch (Exception e) {
    System.out.println("Error: " +e.getMessage());
 
}finally{
    archivo.close();
}
    
    
    }
    private void saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveActionPerformed
        // TODO add your handling code here:
        int n=comboPartida.getSelectedIndex();
        try {

            guardarpartida(n+1);

            GP.setText("se ha Guardado la partida");
        } catch (IOException ex) {
            Logger.getLogger(torredehanoi.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_saveActionPerformed

    private void loadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadActionPerformed
        int n=comboPartida.getSelectedIndex();
        Cargar(n+1);

    }//GEN-LAST:event_loadActionPerformed

    private void comboPartidaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboPartidaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboPartidaActionPerformed
    public void Cargar(int n){
       String cadena;
        String t1="";
        String t2="";
        String t3="";
       String crono="";
       int D=0;      
    FileReader archivo;
BufferedReader lector;
   



try {
    archivo = new FileReader("/home/usuario/NetBeansProjects/Churrasquito"+n+".txt");
    if(archivo.ready()){
        lector =new BufferedReader(archivo);
       
        int pp=1;
        while ((cadena=lector.readLine())!=null) {
        //asignar usuarios 
        if(pp==1){
            t1=cadena;
        }
        if(pp==2){
            t2=cadena;
        }
        if(pp==3){
            t3=cadena;
        }
        
            pp=pp+1;
        }
        if(pp==4){
            crono=cadena;
        }
        if(pp==5){
            D=Integer.parseInt(cadena);
        }

    }else{
        System.out.println("El archivo no esta listo para ser leido");

    }
} catch (Exception e) {
    System.out.println("Error: "+e.getMessage());
}
min=Integer.parseInt(crono.substring(0,2));
seg=Integer.parseInt(crono.substring(3,5));

for(int i=0;i<D;i++){
valorTorre[0][i]=Integer.parseInt(t1.substring(i,i+1));
valorTorre[1][i]=Integer.parseInt(t2.substring(i,i+1));
valorTorre[2][i]=Integer.parseInt(t3.substring(i,i+1));
}



    }
    

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(torredehanoi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(torredehanoi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(torredehanoi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(torredehanoi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                torredehanoi dialog = new torredehanoi(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel GP;
    private javax.swing.JButton bay;
    private javax.swing.JComboBox<String> comboDisks;
    private javax.swing.JComboBox<String> comboPartida;
    private javax.swing.JLabel cronometro;
    private javax.swing.JLabel ganoo;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lb2;
    private javax.swing.JButton load;
    private javax.swing.JLabel moooves;
    private javax.swing.JLabel nombrejugador;
    private javax.swing.JButton retry;
    private javax.swing.JButton save;
    private javax.swing.JButton start;
    private javax.swing.JLabel tiempomejorado;
    private javax.swing.JButton torre1atorre2;
    private javax.swing.JButton torre1atorre3;
    private javax.swing.JButton torre2atorre1;
    private javax.swing.JButton torre2atorre3;
    private javax.swing.JButton torre3atorre1;
    private javax.swing.JButton torre3atorre2;
    private javax.swing.JTextArea towel1;
    private javax.swing.JTextArea towel2;
    private javax.swing.JTextArea towel3;
    private javax.swing.JLabel victorias;
    // End of variables declaration//GEN-END:variables
 int disks=0;

    String [][]Torre;
    int [][] valorTorre;
    
    int c=1;
    public void DefinirDiscos(){
    disks=Integer.parseInt(comboDisks.getSelectedItem().toString());
            
            if(disks==3){
                Torre =new String [3][3];
                valorTorre=new int [3][3];
                
                
                
                
            
            }
            if(disks==4){
                
                Torre=new String [3][4];
                
                valorTorre=new int [3][4];
                
              
            
            }
            if(disks==5){
                Torre=new String [3][5];

                valorTorre=new int [3][5];
                
                
            
            
            }
            if(disks==6){
                
             Torre=new String [3][6];

                valorTorre=new int [3][6];
                
              
            
            }
            if(disks==7){
                
                 Torre=new String [3][7];
 
                valorTorre=new int [3][7];              
                
       
            
            }
            if(disks==8){
                 Torre=new String [3][8];
 
                valorTorre=new int [3][8];              
         
            
            }
                  String d="";
            for(int i=0;i<disks;i++){
                   d+="o";
                   Torre[0][i]=d;
               
                  
               
               valorTorre[0][i]=c;
              
              
               Torre[1][i]="";
              
              
               Torre[2][i]="";
               
               
               valorTorre[1][i]=0;
               valorTorre[2][i]=0;
            
              
              c++;
            }
         
          c=1;
       
            
    
    }
}
